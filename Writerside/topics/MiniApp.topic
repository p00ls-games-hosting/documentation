<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Mini App" id="MiniApp">

    <p>P00LS Games SDK gives access to a few native features, like haptic feedbacks, if available</p>

    <chapter title="Haptic feedbacks" id="haptic_feedbacks">
        The SDK provides three categories of haptic feedbacks :
        <deflist type="narrow">
            <def title="Selection" id="selection">User selected something inside the game</def>
            <def title="Notification" id="notification">User received a notification</def>
            <def title="Impact" id="impact">A collision occurred</def>
        </deflist>
        <p>Notification and impact feedbacks can vary in intensity.</p>

        <tabs>
            <tab title="Unity" id="unity">
                <p>Each notification type has its own method:</p>
                <code-block lang="c#">
                    public void ImpactHapticFeedback(ImpactFeedBackForce force);

                    public void NotificationHapticFeedback(NotificationFeedBackForce force);

                    public void SelectHapticFeedback();
                </code-block>
            </tab>
            <tab title="Typescript" id="typescript">

                <list>
                    <li>
                        Impact
                        <code-block lang="TypeScript">
                            sdk.tma.haptic('impact', 'light');
                            // style can be one of 'light' | 'medium' | 'heavy' | 'rigid' | 'soft'
                        </code-block>
                    </li>
                    <li>
                        Notification
                        <code-block lang="TypeScript">
                            sdk.tma.haptic('notification', 'success');
                            // style can be one of 'error' | 'success' | 'warning'
                        </code-block>
                    </li>
                    <li>
                        Select
                        <code-block lang="TypeScript">
                            sdk.tma.haptic('select');
                        </code-block>
                    </li>
                </list>


            </tab>
        </tabs>
    </chapter>
    <chapter title="Links" id="links">
        <chapter title="Opening URL" id="opening-url">
            In the situation where you would want 
            to use a method like <code>window.open</code>, given a Mini app is a web view, 
            it won't work as usual. Instead, you can use the <code>openLink</code> method.
            <tabs>
                <tab title="Unity" id="unity-2">
                   <code-block lang="C#">
                        sdk.OpenURL("https://some.url");
                   </code-block>
                </tab>
                <tab title="Typescript" id="typescript-2">
                    <code-block lang="typescript">
                        sdk.tma.openLink("https://some.url");
                    </code-block>

                </tab>
            </tabs>
        </chapter>
        <chapter title="Sharing URL" id="sharing_url">
            If you need to share a URL using the native UI, you can use the <code>share</code> method.
            To share the user's referral link directly,
            use the shortcut method from <a href="Referral.topic" anchor="generate_referral_link">Referral doc.</a>

            <tabs>
                <tab title="Unity" id="unity-3">
                    <code-block lang="C#">
                        sdk.ShareURL("https://my.url", "optional message");
                    </code-block>
                </tab>
                <tab title="Typescript" id="typescript-3">
                    <code-block lang="typescript">
                    sdk.tma.share('https://my.url', 'optional message');
                    </code-block>
                </tab>
            </tabs>
        </chapter>
    </chapter>
    <chapter title="Server time" id="server-time">
        <tabs>
            <tab title="Unity" id="unity-1">
               <code-block lang="C#">
                   sdk.GetServerTime(date =>
                    Debug.Log($"Server time: {date.ToString(CultureInfo.InvariantCulture)}")
                   );
               </code-block>
            </tab>
            <tab title="Typescript" id="typescript-1">
                <code-block lang="TypeScript">
                    const serverTime = await sdk.tma.getServerTime();
                    console.log(serverTime.toISOString());
                </code-block>
            </tab>
        </tabs>
    </chapter>
</topic>